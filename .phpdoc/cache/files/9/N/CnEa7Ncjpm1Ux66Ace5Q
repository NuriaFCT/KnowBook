1686674636
waR3U4bTeM%3Ad84468f1aed6492767b9da56a1945d50-3703c1553c6322f98bf595c0fc91ada9
s:16156:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"3703c1553c6322f98bf595c0fc91ada9";s:39:" phpDocumentor\Reflection\Php\File name";s:44:"b394d5da6fa0803ad83daf2d0a7ee2d2e5599e2d.php";s:39:" phpDocumentor\Reflection\Php\File path";s:77:"Proyecto/storage/framework/views/b394d5da6fa0803ad83daf2d0a7ee2d2e5599e2d.php";s:41:" phpDocumentor\Reflection\Php\File source";s:11125:"<!--DESCRIPCION: Vista en detalle o individual de los post. Se accedera a los comentarios y al contenido entero-->

<?php if (isset($component)) { $__componentOriginal8e2ce59650f81721f93fef32250174d77c3531da = $component; } ?>
<?php $component = $__env->getContainer()->make(App\View\Components\AppLayout::class, [] + (isset($attributes) ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName('app-layout'); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>
<?php if (isset($attributes) && $constructor = (new ReflectionClass(App\View\Components\AppLayout::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
     <?php $__env->slot('header', null, []); ?> 
        
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            <?php echo e(__('Más información sobre el libro')); ?>

        </h2>
     <?php $__env->endSlot(); ?>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">

                    <!--Autor: Foto, fecha y nickname-->
                    <table class=" overflow-hidden mb-4" style="width:100%; height:100px; margin-left: 50px">
                        <?php $__currentLoopData = $datos; $__env->addLoop($__currentLoopData); foreach($__currentLoopData as $dato): $__env->incrementLoopIndices(); $loop = $__env->getLastLoop(); ?>
                            <tr>
                                <td rowspan="3" style="width:25%">
                                    <?php if(is_null($dato->image_profile)): ?> 
                                        <img class="max-w-full h-auto rounded-full"
                                        src="<?php echo e(url('img/users/avatar.png')); ?>" height="100"
                                        width="100" />    
                                    <?php else: ?>

                                        <img class="max-w-full h-auto rounded-full"
                                        src="<?php echo e(url('img/users/' . $dato->image_profile)); ?>" height="100"
                                        width="100" /> 
                                    <?php endif; ?>
                                </td>
                            </tr>
                            <tr>
                                <td><?php echo e($dato->name); ?></td>
                            </tr>
                            <tr>
                                <td style=" opacity: 0.5"><?php echo e($dato->date_publication); ?></td>
                            </tr>
                        
                    </table>

                    <!--Opciones-->
                    <div style="text-align: right;" class="ml-12">
                        <div class="mt-2">

                            <!--Comprobemos los roles en primer lugar
                            
                                Admin: No le pertenece el post podrá borrar. Si le pertenece podrá borrarlo y editarlo
                                User: No le èrtenece no podrá hacer nada. Si es suyo editar y eliminar.
                            
                            -->
                            <!--Es Admin-->
                            <?php if(Auth::user()->role_id == 1): ?> 
            
                
                            <!--El post le pertenece-->
                                    <?php if(Auth::user()->id == $dato->user_id): ?>

                                

                                            <a href="<?php echo e(route('post.edit', $dato->id)); ?>">
                                                <input type="submit"
                                                    class="mb-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150"
                                                    style="background-color: #a05a2c;" value="Editar">
                                            </a>

                                            <a href="<?php echo e(route('post.destroy', $dato->id)); ?>">
                                                <input type="submit"
                                                    class="mb-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150"
                                                    style="background-color: #a05a2c;" value="Eliminar">
                                            </a>    
                               <!--No le pertenece-->             
                                    <?php else: ?>
                                            <a href="<?php echo e(route('post.destroy', $dato->id)); ?>">
                                                <input type="submit"
                                                    class="mb-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150"
                                                    style="background-color: #a05a2c;" value="Eliminar">
                                            </a>      
                                    <?php endif; ?>


                            <!--No es admin-->
                            <?php else: ?>
                            <!--El post le pertenece-->
                                    <?php if(Auth::user()->id == $dato->user_id): ?>

                                            <a href="<?php echo e(route('post.edit', $dato->id)); ?>">
                                                <input type="submit"
                                                    class="mb-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150"
                                                    style="background-color: #a05a2c;" value="Editar">
                                            </a>

                                            <a href="<?php echo e(route('post.destroy', $dato->id)); ?>">
                                                <input type="submit"
                                                    class="mb-3 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150"
                                                    style="background-color: #a05a2c;" value="Eliminar">
                                            </a> 
                                            
                                    <!--No le pertenece. No ha de mostrar ningun boton-->        

                                    <?php endif; ?>

                            <?php endif; ?>  
                            <a href="<?php echo e(url('dashboard/')); ?>">
                                <input type="button"
                                    class='inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring ring-gray-300 disabled:opacity-25 transition ease-in-out duration-150 '
                                    style="background-color: #a05a2c; margin-left: 4px" value="Regresar">
                            </a>
                        </div>
                    </div>

                    <!--Imagen de portada-->
            
                        <div class=" mt-4 mb-4 flex flex-wrap justify-center ">
                            <img src="<?php echo e(url('img/posts/' . $dato->image)); ?>" height="400px" width="300px" />
                        </div>
                   

                    

                    <!--Titulo, lugares donde comprar, descripcion, likes y comentarios-->
                    <div class="ml-12">
                        <div class="mt-2 text-center">
                            <p class="text-xl font-bold"><?php echo e($dato->title); ?></p>
                            <p class="text-lg font-semibold mt-1">Disponible en : <?php echo e($dato->buy_on); ?></p>
                        </div>
                        <p class="text-lg mt-4"><?php echo e($dato->description); ?></p>

                        <!--Bucle para los likes-->
                       
                            <p class="text-base mt-4" style="color: #5e3217">Likes (<?php echo e($dato->likes); ?>)</p>
                      

                        <!--Listar comentarios de ese post-->
                       
                        <a href="<?php echo e(route('posts.showComments', $dato->id)); ?>">
                            <p class="text-base mt-1" style="color: #5e3217">Comentarios
                                (<?php echo e($dato->comentarios); ?>)
                            </p>
                        </a>   
                        <?php endforeach; $__env->popLoop(); $loop = $__env->getLastLoop(); ?>
                        
                        <!--Crear comentarios-->
                        <a href="<?php echo e(route('posts.createComment', $dato->id)); ?>">
                            <p class="text-base mt-1" style="color: #5e3217">Hacer un comentario</p>
                        </a>   
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
 <?php echo $__env->renderComponent(); ?>
<?php endif; ?>
<?php if (isset($__componentOriginal8e2ce59650f81721f93fef32250174d77c3531da)): ?>
<?php $component = $__componentOriginal8e2ce59650f81721f93fef32250174d77c3531da; ?>
<?php unset($__componentOriginal8e2ce59650f81721f93fef32250174d77c3531da); ?>
<?php endif; ?>
<?php /**PATH C:\xampp\htdocs\KnowBook\Proyecto\resources\views/post/show.blade.php ENDPATH**/ ?>";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";